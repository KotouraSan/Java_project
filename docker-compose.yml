version: "2.4"

services:
  config-server:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "build/libs/Config_server_service-0.0.1-SNAPSHOT.jar"
        SERVICE_PATH: "./Config_server_service"
    networks:
      - app
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/api/v1/config/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  discovery-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "build/libs/Discovery_service-0.0.1-SNAPSHOT.jar"
        SERVICE_PATH: "./Discovery_service"
    networks:
      - app
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/api/v1/discovery/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  gateway-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "build/libs/Gateway_service-0.0.1-SNAPSHOT.jar"
        SERVICE_PATH: "./Gateway_service"
    networks:
      - app
    ports:
      - "8222:8222"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8222/api/v1/gateway/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  auth-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "build/libs/Auth_service-0.0.1-SNAPSHOT.jar"
        SERVICE_PATH: "./Auth_service"
    networks:
      - app
    depends_on:
      postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway-service:
        condition: service_healthy

  customer-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "build/libs/Customer_service-0.0.1-SNAPSHOT.jar"
        SERVICE_PATH: "./Customer_service"
    networks:
      - app
    depends_on:
      postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      zipkin:
        condition: service_healthy

  delivery-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "build/libs/Delivery_service-0.0.1-SNAPSHOT.jar"
        SERVICE_PATH: "./Delivery_service"
    networks:
      - app
    depends_on:
      postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      zipkin:
        condition: service_healthy

  order-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "build/libs/Order_service-0.0.1-SNAPSHOT.jar"
        SERVICE_PATH: "./Order_service"
    networks:
      - app
    depends_on:
      postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      zipkin:
        condition: service_healthy

  shop-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        JAR_FILE: "build/libs/Shop_service-0.0.1-SNAPSHOT.jar"
        SERVICE_PATH: "./Shop_service"
    networks:
      - app
    depends_on:
      postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy

  front:
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      gateway-service:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: bestuser
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app

networks:
  app:
    driver: bridge

volumes:
  postgres: